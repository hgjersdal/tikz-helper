(ql:quickload "tikz-helper")
(in-package :tikz-helper)
(defparameter *plotting-dir* "/home/haavagj/src/tikz-helper/")

(defun make-random-list (size)
  (let ((rands nil))
    (dotimes (i size)
      (push (- (random 1.0d0) 0.5) rands))
    rands))

(with-tikz-plot (tikz (concatenate 'string *plotting-dir* "test-graph.tex") 10 5 0 10 0 20)
  (draw-plottingarea-rectangle tikz)
  (clip (tikz)
    (draw-graph tikz (make-range 0 1 10) (mapcar #'+ (make-range 0 2 10) (make-random-list 11)) "smooth,blue" "blue,fill=blue")
    (draw-function tikz (lambda (x) (+ (* (sin x) 5) 10)) 200 "draw=green")
    (mapcar (lambda (x y err) (draw-profilepoint tikz x y err "draw=red,fill=red"))
	    (make-range 0 1 10)
	    (mapcar #'- (make-range 20 -2 10) (make-random-list 11))
	    (make-range 0.5 0 10))
    (draw-legend-line tikz 5   4.6 1 "Expected" "thick,dotted" "" "")
    (draw-legend-line tikz 5   4.2 1 "5sin(x)+10" "green" "" "")
    (draw-legend-line tikz 2.3 4.6 1 "Graph" "blue" "blue,fill=blue" "")
    (draw-legend-line tikz 2.3 4.2 1 "Profile" "red" "red,fill=red" ""))
  (draw-axis-ticks-x-transformed tikz (make-range 0 1 10) 1)
  (draw-axis-ticks-y-transformed tikz (make-range 0 2 10) 1)
  (draw-line tikz 0 0 10 5 "thick,dotted")
  (draw-line tikz 0 5 10 0 "thick,dotted")
  (draw-plottingarea-rectangle tikz))

(with-tikz-plot (tikz (concatenate 'string *plotting-dir* "test-histo1.tex") 10 5 0 10 0 20)
  (clip (tikz)
    (draw-histogram-top tikz (make-histogram 0 1 (mapcar (lambda (x) (+ (* 10 x) 10)) (make-random-list 10))) "blue"))
  (draw-axis-ticks-x-transformed tikz (make-range 0 1 10) 1)
  (draw-axis-ticks-y-transformed tikz (make-range 0 2 10) 1)
  (draw-plottingarea-rectangle tikz)
  (draw-line tikz 0 2.5 10 2.5 "thick,dotted")
  (draw-node tikz 10 2.5 "Mean" "right")
  (draw-legend-line tikz 0.5 4.5 1 "Outlined histogram" "blue" "" ""))
 
(with-tikz-plot (tikz (concatenate 'string *plotting-dir* "test-histo2.tex") 10 5 0 10 0 20)
  (clip (tikz)
    (let ((histo (make-histogram 0 1 (mapcar (lambda (x) (+ (* 10 x) 10)) (make-random-list 10)))))
      (draw-histogram tikz  histo "draw=blue!20,fill=blue!20")
      (draw-histogram-top tikz histo "blue!80!black"))
    (draw-histogram-top tikz (make-histogram 0 1 (mapcar (lambda (x) (+ (* 10 x) 10)) (make-random-list 10))) "ultra thick, red"))
  (draw-axis-ticks-x tikz (tikz-transform-x tikz (make-range 0.5 1 9)) (make-range 0 1 9) t 2)
  (draw-axis-ticks-y-transformed tikz (make-range 0 2 10) 1)
  (draw-line tikz 0 2.5 10 2.5 "thick,dotted")
  (draw-node tikz 10 2.5 "Mean" "right")
  (draw-plottingarea-rectangle tikz)
  (draw-legend-rectangle tikz 0.5 4.5 1 0.2 "Filled histogram" "blue!80!black" "draw=blue!20,fill=blue!20" "")
  (draw-legend-line tikz 0.5 4.1 1 "Outlined histogram" "ultra thick,red" "" ""))


(with-tikz-plot (tikz (concatenate 'string *plotting-dir* "test-fitter.tex") 10 5 0 10 0 20)
  (let* ((x-poses (make-range 0 0.5 20))
	 (y-poses (mapcar (lambda (x) (gauss x #(90.0d0 5.0d0 2.0d0))) x-poses))
	 (smeared-y (mapcar (lambda (x) (+ x (* .5 (gaussian-random)))) y-poses))
	 (fit-params (levmar-optimize #'gauss #(10.0d0 0.0d0 1.0d0) x-poses y-poses)))
    (clip (tikz)
      (draw-graph tikz x-poses smeared-y "draw=blue,fill=blue" "draw=blue,fill=blue" t)
      (draw-function tikz (lambda (x) (gauss x fit-params)) 200 "thick,red"))
    (draw-axis-ticks-x tikz (tikz-transform-x tikz (make-range 0.5 1 9)) (make-range 0 1 9) t 2)
    (draw-axis-ticks-y-transformed tikz (make-range 0 2 10) 1)
    (draw-legend-line tikz 0.5 4.5 1 "Noisy data" "draw=blue,fill=blue" "draw=blue,fill=blue" "")
    (draw-legend-line tikz 0.5 4.1 1 "Gauss fit" "thick,red" "" "")
    (draw-node tikz 9.5 4.5 (format nil "Fitted mean: ~5,2f" (aref fit-params 1)) "left")
    (draw-node tikz 9.5 4.1 (format nil "Fitted sigma: ~5,2f" (aref fit-params 2)) "left")
    (draw-plottingarea-rectangle tikz)))

(with-tikz-plot (tikz (concatenate 'string *plotting-dir* "test-fitter2.tex") 10 5 0 10 0 300)
  (let* ((data (make-array 20)))
    (dotimes (i 1000)
      (multiple-value-bind (g1 g2) (gaussian-random)
	(let ((bin1 (floor (+ 5.0 (* 1.5 g1)) 0.5))
	      (bin2 (floor (+ 5.0 (* 1.5 g2)) 0.5)))
	  (and (>= bin1 0) (< bin1 20) (incf (aref data bin1)))
	  (and (>= bin2 0) (< bin2 20) (incf (aref data bin2))))))
    (clip (tikz)
      (draw-histogram-top tikz (make-histogram 0 0.5 (map 'list (lambda (x) x) data)) "draw=blue"))
    (let* ((x-poses (make-range 0.25 0.5 20))
	   (y-poses data)
	   (y-errors (map 'vector #'sqrt data))
	   (parameters (levmar-optimize-errors #'gauss #(300.0d0 0.0d0 1.0d0) x-poses y-poses y-errors)))
      (draw-node tikz 9.5 4.5 (format nil "Fitted mean: ~5,2f" (aref parameters 1)) "left")
      (draw-node tikz 9.5 4.1 (format nil "Fitted sigma: ~5,2f" (aref parameters 2)) "left")
      (clip (tikz)
	(draw-function tikz (lambda (x) (gauss x parameters)) 200 "thick,red")))
    (draw-axis-ticks-x tikz (tikz-transform-x tikz (make-range 0.5 1 9)) (make-range 0 1 9) t 2)
    (draw-axis-ticks-y-transformed tikz (make-range 0 30 10) 1)
    (draw-legend-line tikz 0.5 4.5 1 "2000 Gauss-rand" "draw=blue,fill=blue" "" "")
    (draw-legend-line tikz 0.5 4.1 1 "Gauss fit" "thick,red" "" "")
    (draw-plottingarea-rectangle tikz)))

	      
